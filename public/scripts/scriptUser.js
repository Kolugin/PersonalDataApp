document.addEventListener("DOMContentLoaded", function () {
    const dataForm = document.getElementById("add-form");
    const dataTypes = [
        "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", "‚Ññ –ø–∞—Å–ø–æ—Ä—Ç–∞", "‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã",
        "–ü–∞—Ä–æ–ª—å", "–õ–æ–≥–∏–Ω", "–ö–æ–¥", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "–†–∞—Å–∞", "–í–∑–≥–ª—è–¥—ã –Ω–∞ –∂–∏–∑–Ω—å",
        "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã", "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã", "–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç",
        "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞—Ö", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ü–æ–ª–æ–≤–∞—è –∂–∏–∑–Ω—å", "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
        "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ü—Ä–æ—á–µ–µ"
    ];
    const elements = {
        view: document.getElementById("data-table-view"),
        edit: document.getElementById("data-table-edit"),
        add: document.getElementById("add-form"),
        upload: document.getElementById("upload-file-form"),
        files: document.getElementById("files-container")
    };
    window.fetchUserData = fetchUserData;
    window.showAddForm = showAddForm;
    window.showTableView = showTableView;
    window.showTableEdit = showTableEdit;
    window.showUploadFileForm = showUploadFileForm;
    window.showFiles = showFiles;
    window.fetchFiles = fetchFiles;
    window.downloadFile = downloadFile;
    window.deleteFile = deleteFile;
    window.logout = logout;
    window.updateData = updateData;
    let isEditableMode = false;
    function createSelect(value) {
        const select = document.createElement("select");
        dataTypes.forEach(type => {
            const option = document.createElement("option");
            option.value = type;
            option.textContent = type;
            if (type === value) option.selected = true;
            select.appendChild(option);
        });
        return select;
    }
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    const selectElement = document.getElementById("type_datap");
    dataTypes.forEach(type => {
        const option = document.createElement("option");
        option.value = type;
        option.textContent = type;
        selectElement.appendChild(option);
    });
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    function showTableView() {
        isEditableMode = false; // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        toggleViews("view");
        fetchUserData(false); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    function showTableEdit() {
        isEditableMode = true; // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        toggleViews("edit");
        fetchUserData(true); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    function showAddForm() {
        isEditableMode = false; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        toggleViews("add");
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    function showUploadFileForm() {
        toggleViews("upload");
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–π–ª–æ–≤
    function showFiles() {
        toggleViews("files");
        fetchFiles(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function toggleViews(mode) {
        // —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        Object.values(elements).forEach(el => {
            if (el) el.style.display = "none";
        });
    
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (elements[mode]) {
            elements[mode].style.display = (mode === "view" || mode === "edit") ? "table" : "block";
        }
    }
    
    async function fetchUserData(isEditMode) {
        const loader = document.getElementById("loader");
        if (loader) loader.style.display = "block";

        try {
            const response = await fetch("/userdata", {
                method: "GET",
                headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            const responseData = await response.json();

            if (!responseData.success || !Array.isArray(responseData.data)) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            }

            if (isEditMode) {
                renderEditTable(responseData.data);
            } else {
                renderViewTable(responseData.data);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            alert(error.message);
        } finally {
            if (loader) loader.style.display = "none";
        }
    }
    function showTableView() {
        isTableViewVisible = true;
        isTableEditVisible = false;

        document.getElementById("data-table-view").style.display = "table";
        document.getElementById("data-table-edit").style.display = "none";

        fetchUserData(false); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    }

    function showTableEdit() {
        isTableViewVisible = false;
        isTableEditVisible = true;

        document.getElementById("data-table-view").style.display = "none";
        document.getElementById("data-table-edit").style.display = "table";

        fetchUserData(true); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    function createTd(...elements) {
        const td = document.createElement("td");
        elements.forEach(element => {
            if (element && typeof element === "object" && element.nodeType === Node.ELEMENT_NODE) {
                td.appendChild(element);
            } else if (typeof element === "string" || typeof element === "number") {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
                td.appendChild(document.createTextNode(String(element)));
            }
        });
        return td;
    }
    function renderViewTable(data) {
        const table = document.getElementById("data-table-view");
        if (!table) {
            console.error("–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }
        const tableBody = table.querySelector("tbody");
        if (!tableBody) {
            console.error("–û—à–∏–±–∫–∞: tbody –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞");
            return;
        }
        tableBody.innerHTML = "";
        const fragment = document.createDocumentFragment();

        data.forEach(entry => {
            if (!entry.id || isNaN(entry.id)) return;

            const row = document.createElement("tr");

            row.appendChild(createTd(entry.id));
            row.appendChild(createTd(entry.datap));
            row.appendChild(createTd(entry.type_datap));
            row.appendChild(createTd(entry.comment));
            fragment.appendChild(row);
        });

        tableBody.appendChild(fragment);
    }

    function renderEditTable(data) {
        const table = document.getElementById("data-table-edit");
        if (!table) {
            console.error("–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        const tableBody = table.querySelector("tbody");
        if (!tableBody) {
            console.error("–û—à–∏–±–∫–∞: tbody –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            return;
        }

        tableBody.innerHTML = "";
        const fragment = document.createDocumentFragment();

        data.forEach(entry => {
            if (!entry.id || isNaN(entry.id)) return;

            const row = document.createElement("tr");

            const idCell = document.createElement("td");
            idCell.textContent = entry.id;
            row.appendChild(idCell);

            const inputDatap = document.createElement("input");
            inputDatap.type = "text";
            inputDatap.value = entry.datap;
            inputDatap.id = `datap-${entry.id}`;
            row.appendChild(createTd(inputDatap));

            const selectType = createSelect(entry.type_datap);
            row.appendChild(createTd(selectType));

            const inputComment = document.createElement("input");
            inputComment.type = "text";
            inputComment.value = entry.comment;
            inputComment.id = `comment-${entry.id}`;
            row.appendChild(createTd(inputComment));

            const saveButton = document.createElement("button");
            saveButton.textContent = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
            saveButton.onclick = () => updateData(entry.id);

            const deleteButton = document.createElement("button");
            deleteButton.textContent = "üóë –£–¥–∞–ª–∏—Ç—å";
            deleteButton.onclick = () => deleteData(entry.id);

            row.appendChild(createTd(saveButton, deleteButton));

            fragment.appendChild(row);
        });

        tableBody.appendChild(fragment);
    }
    //–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    async function addData(event) {
        event.preventDefault();
        const datap = document.getElementById("datap").value.trim();
        const type_datap = document.getElementById("type_datap").value.trim();
        const comment = document.getElementById("comment").value.trim();
        const token = localStorage.getItem("token");

        if (!datap || !type_datap || !comment) {
            alert("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
            return;
        }
        try {
            const response = await fetch("/userdata", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ datap, type_datap, comment })
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            alert("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            document.getElementById("datap").value = "";
            document.getElementById("type_datap").value = "";
            document.getElementById("comment").value = "";
            fetchUserData(true);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            alert(error.message);
        }
    }
    //–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    async function updateData(id) {
        const datap = document.getElementById(`datap-${id}`).value.trim();
        const row = document.getElementById(`datap-${id}`).closest("tr");
        const type_datap = row.querySelector("select").value.trim();
        const comment = document.getElementById(`comment-${id}`).value.trim();
        const token = localStorage.getItem("token");

        if (!datap || !type_datap || !comment) {
            alert("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
            return;
        }

        try {
            const response = await fetch(`/userdata/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ datap, type_datap, comment })
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            alert("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
            fetchUserData(true);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    };
    //–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    async function deleteData(id) {
        if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) return;
        const token = localStorage.getItem("token");

        try {
            const response = await fetch(`/userdata/${id}`, {
                method: "DELETE",
                headers: { "Authorization": `Bearer ${token}` }
            });
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            alert("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
            fetchUserData(true);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    async function logout() {
        try {
            const token = localStorage.getItem("token");
            if (!token) {
                alert("–í—ã —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞
            const response = await fetch("/logout", {
                method: "POST",
                headers: { "Authorization": `Bearer ${token}` }
            });

            if (!response.ok) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", await response.text());
                alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.");
            } else {
                alert("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã—Ö–æ–¥–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
        }

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        localStorage.removeItem("token");
        window.location.href = "index.html";
    };
    //–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    document.getElementById("upload-file-form").addEventListener("submit", async function (event) {
        event.preventDefault();
        const fileInput = document.getElementById("file");
        const file = fileInput.files[0];

        if (!file) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!");
            return;
        }

        const formData = new FormData();
        formData.append("file", file);

        try {
            const token = localStorage.getItem("token");
            if (!token) {
                alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
                return;
            }

            const response = await fetch("/upload-file", {
                method: "POST",
                headers: { "Authorization": `Bearer ${token}` },
                body: formData
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            alert("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
            fetchFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    });
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    async function fetchFiles() {
        try {
            const token = localStorage.getItem("token");
            if (!token) {
                alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
                return;
            }

            const response = await fetch("/files", {
                headers: { "Authorization": `Bearer ${token}` }
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∏–∑ –ø–æ–ª—è data
            const jsonResponse = await response.json();
            const files = Array.isArray(jsonResponse) ? jsonResponse : jsonResponse.data;

            const tableBody = document.querySelector("#files-table tbody");
            if (!tableBody) {
                console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }

            tableBody.innerHTML = "";

            files.forEach(file => {
                const row = document.createElement("tr");

                row.innerHTML = `
                    <td>${file.id}</td>
                    <td>${file.filename}</td>
                    <td>${new Date(file.uploaded_at).toLocaleString()}</td>
                    <td>
                        <button onclick="downloadFile(${file.id})">–°–∫–∞—á–∞—Ç—å</button>
                        <button onclick="deleteFile(${file.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    </td>
                `;

                tableBody.appendChild(row);
            });

            document.getElementById("files-container").classList.remove("hidden");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:", error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(id) {
    try {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
            return;
        }

        const response = await fetch(`/files/${id}`, {
            headers: { Authorization: `Bearer ${token}` }
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => null);
            const errorMessage = errorData?.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
            throw new Error(errorMessage);
        }

        const blob = await response.blob();
        const disposition = response.headers.get("Content-Disposition");
        const filenameMatch = disposition && disposition.match(/filename="(.+)"/);
        const filename = filenameMatch ? decodeURIComponent(filenameMatch[1]) : "file";

        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.style.display = "none";
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    async function deleteFile(id) {
        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?")) return;

        try {
            const token = localStorage.getItem("token");
            if (!token) {
                alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
                return;
            }

            const response = await fetch(`/files/${id}`, {
                method: "DELETE",
                headers: { "Authorization": `Bearer ${token}` }
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            alert("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            fetchFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    };
    if (dataForm) {
        dataForm.addEventListener("submit", addData);
    }
});
